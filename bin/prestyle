#!/usr/bin/env node

'use strict'; //eslint-disable-line

/* eslint no-console: 0, global-require: 0, no-cond-assign: 0, import/no-dynamic-require: 0 */

const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const mkdirp = require('mkdirp');
const union = require('lodash/union');
const packageJSON = require('../package.json');
const processBlock = require('./processBlock');
const writeFiles = require('./writeFiles');

program
  .version(packageJSON.version)
  .option('-c, --config [file]', 'source config file')
  .option('-o, --outputFile [file]', 'generated .css file')
  .option('-a, --adapter [file]', 'adapter function to process css')
  .option('-d, --destination <dir>', 'directory to put files processed by PreStyle')
  .option('-p, --prependedFiles <items>', 'comma separated list of files to prepend', list => list.split(','))
  .parse(process.argv);

function preStyleFile(file, config, classNames) {
  console.log(`Processing file ${chalk.cyan(file)}`);
  let fileContents = fs.readFileSync(file, { encoding: 'utf-8' });
  const blocks = [];

  //Initially, look for PreStyle`...` blocks
  let re = /PreStyle`\s*([\s\S]+?)\s*`/gm;
  let matches;

  while ((matches = re.exec(fileContents)) !== null) {
    const { 0: full, 1: css } = matches;
    blocks.push({ full, css });
  }

  //Then look for <PreStyle>...</PreStyle> blocks
  re = /<PreStyle>\s*([\s\S]+?)\s*<\/PreStyle>/gm;

  while ((matches = re.exec(fileContents)) !== null) {
    const { 0: full, 1: css } = matches;
    blocks.push({ full, css });
  }

  let css = '';

  //Iterate over blocks, assign classNames, write classnames to content, and add CSS block for that file
  blocks.forEach((block) => {
    const data = processBlock(block.css, config, classNames);
    fileContents = fileContents.replace(block.full, `"${Object.keys(data.classNames).map(key => data.classNames[key]).join(' ')}"`);
    Object.assign(classNames, data.classNames);
    css += data.css;
  });

  //Write destination file
  const fileDest = path.resolve(config.destination, file);
  mkdirp(path.dirname(fileDest), () => {
    fs.writeFile(fileDest, fileContents, (err) => {
      if (err) throw err;
      console.log(`${chalk.green('File')} ${chalk.cyan(`${config.destination}/${file}`)} ${chalk.green('created.')}`);
    });
  });

  return css;
}

function processFiles(config) {
  const classNames = {};
  let css = '';

  config.sourceFiles.forEach(function getFile(file) {
    const resloc = path.relative(process.cwd(), path.resolve(file));
    const stat = fs.statSync(resloc);

    if (stat.isFile()) css += preStyleFile(resloc, config, classNames);
    else if (stat.isDirectory()) {
      console.log(`Looking for files in directory ${chalk.cyan(resloc)}`);
      fs.readdirSync(resloc).forEach(fn => getFile(`${resloc}/${fn}`));
    }
  });

  return { css, classNames };
}

try {
  //Get config info
  let configFileLocation = program.config || 'PreStyleConfig.js';
  if (!fs.existsSync(path.resolve(configFileLocation))) configFileLocation = null;

  const config = Object.assign(
    {},
    (configFileLocation ? require(path.resolve(configFileLocation)) : {}),
    (program.destination ? { destination: program.destination || './' } : {}),
    (program.outputFile ? { outputFile: program.outputFile } : {}),
    (program.adapter ? { adapter: program.adapter } : {}),
    (program.prependedFiles ? { prependedFiles: program.prependedFiles } : {})
  );

  if (!config.destination) {
    throw new Error(`You ${chalk.bold('MUST')} specify a destination with ${chalk.italic('-d')}, ${chalk.italic('--destination')}, or via the config file.`);
  }

  if (!config.outputFile) {
    throw new Error(`You ${chalk.bold('MUST')} specify an output file with ${chalk.italic('-o')}, ${chalk.italic('--outputFile')}, or via the config file.`);
  }

  if (typeof config.adapter !== 'undefined' && typeof config.adapter !== 'string') {
    throw new Error(`You ${chalk.bold('MUST')} specify a path to your adapter function in the config file or leave it undefined to use the default.`);
  }

  config.sourceFiles = union(program.args) || [];

  //Make sure destination folder is written
  try {
    mkdirp.sync(path.resolve(config.destination));
  } catch (e) {}

  //Write the css and js classname files
  writeFiles(processFiles(config), config, false);
} catch (e) {
  console.log(chalk.underline.red('Error:'));
  console.log(e);
}
